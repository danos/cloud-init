--- a/cloudinit/config/cc_resizefs.py
+++ b/cloudinit/config/cc_resizefs.py
@@ -233,7 +233,7 @@
         return
 
     # TODO(harlowja): allow what is to be resized to be configurable??
-    resize_what = "/"
+    resize_what = "/boot"
     result = util.get_mount_info(resize_what, log)
     if not result:
         log.warn("Could not determine filesystem type of %s", resize_what)
--- a/tests/unittests/test_handler/test_handler_resizefs.py
+++ b/tests/unittests/test_handler/test_handler_resizefs.py
@@ -98,10 +98,10 @@
         logs = self.logs.getvalue()
         self.assertNotIn("WARNING: Invalid config:\nresize_rootfs:", logs)
         self.assertIn(
-            'WARNING: Could not determine filesystem type of /\n',
+            'WARNING: Could not determine filesystem type of /boot\n',
             logs)
         self.assertEqual(
-            [mock.call('/', LOG)],
+            [mock.call('/boot', LOG)],
             m_get_mount_info.call_args_list)
 
     def test_handle_warns_on_undiscoverable_root_path_in_commandline(self):
@@ -110,9 +110,9 @@
         exists_mock_path = 'cloudinit.config.cc_resizefs.os.path.exists'
 
         def fake_mount_info(path, log):
-            self.assertEqual('/', path)
+            self.assertEqual('/boot', path)
             self.assertEqual(LOG, log)
-            return ('/dev/root', 'ext4', '/')
+            return ('/dev/root', 'ext4', '/boot')
 
         with mock.patch(exists_mock_path) as m_exists:
             m_exists.return_value = False
