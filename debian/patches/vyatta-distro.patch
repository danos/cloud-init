--- /dev/null
+++ b/cloudinit/distros/vrouter.py
@@ -0,0 +1,259 @@
+# vi: ts=4 expandtab
+#
+#    Copyright (C) 2015 Brocade Communication Systems, Inc.
+#
+#    Author: Jan Blunck <jblunck@brocade.com>
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License version 3, as
+#    published by the Free Software Foundation.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+from cloudinit import distros
+from cloudinit import helpers
+from cloudinit import log as logging
+from cloudinit import util
+
+from cloudinit.distros import net_util
+from cloudinit.distros.parsers.hostname import HostnameConf
+from cloudinit.settings import PER_INSTANCE
+
+LOG = logging.getLogger(__name__)
+
+import os
+from vyatta import configd
+
+class Distro(distros.Distro):
+    locale_conf_fn = "/etc/default/locale"
+    systemd_locale_conf_fn = '/etc/locale.conf'
+    network_conf_fn = "/etc/network/interfaces"
+    tz_local_fn = "/etc/localtime"
+    client = None
+
+    def __init__(self, name, cfg, paths):
+        distros.Distro.__init__(self, name, cfg, paths)
+        # This will be used to restrict certain
+        # calls from repeatly happening (when they
+        # should only happen say once per instance...)
+        self._runner = helpers.Runners(paths)
+        self.osfamily = 'vrouter'
+
+    def SetupSession(self):
+        if not self.client:
+            self.client = configd.Client()
+            sessid = str(os.getpid())
+            result = self.client.session_setup(sessid)
+
+    #
+    # configd is not running at this point so we can't apply a network
+    # configuration.  The metadata is already stored in the cache which
+    # will be read by a module during the config stage.
+    #
+
+    def apply_network(self, settings, bring_up=True):
+        return
+
+    def _write_network(self, settings):
+        return
+
+    def _bring_up_interfaces(self, device_names):
+        return
+
+    #
+    # The following functions are called during 'init phase' which is executed
+    # before the configd system loaded the initial configuration file.
+    #
+
+    def _select_hostname(self, hostname, fqdn):
+        # Prefer the short hostname over the long
+        # fully qualified domain name
+        if not hostname:
+            return fqdn
+        return hostname
+
+    def _write_hostname(self, your_hostname, out_fn):
+        conf = None
+        try:
+            # Try to update the previous one
+            # so lets see if we can read it first.
+            conf = self._read_hostname_conf(out_fn)
+        except IOError:
+            pass
+        if not conf:
+            conf = HostnameConf('')
+        conf.set_hostname(your_hostname)
+        util.write_file(out_fn, str(conf), 0644)
+        # FIXME: append to dictionary with key "interfaces" and store it in
+        # JSON file /var/run/vyatta-cloud-config.json
+
+    def _read_system_hostname(self):
+        sys_hostname = self._read_hostname(self.hostname_conf_fn)
+        return (self.hostname_conf_fn, sys_hostname)
+
+    def _read_hostname_conf(self, filename):
+        conf = HostnameConf(util.load_file(filename))
+        conf.parse()
+        return conf
+
+    def _read_hostname(self, filename, default=None):
+        hostname = None
+        try:
+            conf = self._read_hostname_conf(filename)
+            hostname = conf.hostname
+        except IOError:
+            pass
+        if not hostname:
+            return default
+        return hostname
+
+    def create_user(self, name, **kwargs):
+        self.add_user(name, **kwargs)
+
+        # Default locking down the account. 'lock_passwd' defaults to True.
+        # lock account unless lock_password is False.
+        if kwargs.get('lock_passwd', True):
+            self.lock_passwd(name)
+
+        # Import SSH keys
+        if 'ssh_authorized_keys' in kwargs:
+            keys = set(kwargs['ssh_authorized_keys']) or []
+            self.setup_user_keys(keys, name, options=None)
+
+    def setup_user_keys(self, keys, user, options):
+        keyNo = 0
+        path = [ "system", "login", "user", user,
+                 "authentication", "public-keys" ]
+        if self.client.node_exists(self.client.AUTO, path):
+            result = self.client.delete(path)
+
+        for key in keys:
+            key = key.encode('ascii', 'ignore')
+            (keyType, keyBase64, comment) = key.split();
+            result = self.client.set(path + [str(keyNo), "key", keyBase64])
+            result = self.client.set(path + [str(keyNo), "type", keyType])
+            keyNo = keyNo + 1
+        result = self.client.commit("")
+
+    def add_user(self, user, **kwargs):
+        """
+        Add a user to the system using Vyatta CLI
+        Called in 'config' phase.
+        """
+        self.SetupSession()
+
+        path = [ "system", "login", "user", user ]
+        if not self.client.node_exists(self.client.AUTO, path):
+            result = self.client.set(path)
+
+        path = [ "system", "login", "user", user, "full-name" ]
+        if self.client.node_exists(self.client.AUTO, path):
+            result = self.client.delete(path)
+        if 'gecos' in kwargs:
+            result = self.client.set(path + [kwargs['gecos']])
+
+        path = [ "system", "login", "user", user, "home-directory" ]
+        if self.client.node_exists(self.client.AUTO, path):
+            result = self.client.delete(path)
+        if 'homedir' in kwargs:
+            result = self.client.set(path + [kwargs['homedir']])
+
+        path = [ "system", "login", "user", user, "level" ]
+        if self.client.node_exists(self.client.AUTO, path):
+            result = self.client.delete(path)
+        if 'sudo' in kwargs:
+            result = self.client.set(path + ["superuser"])
+
+        path = [ "system", "login", "user", user, "authentication",
+                 "encrypted-password" ]
+        if self.client.node_exists(self.client.AUTO, path):
+            result = self.client.delete(path)
+        if 'passwd' in kwargs:
+            result = self.client.set(path + [kwargs['passwd']])
+
+        result = self.client.commit("")
+
+    def set_passwd(self, user, passwd, hashed=False):
+        """Called in 'config' phase"""
+        self.SetupSession()
+        path = [ "system", "login", "user", user, "authentication" ]
+        if hashed:
+            path.append([ "encrypted-password", passwd ])
+        else:
+            path.append([ "plaintext-password", passwd ])
+        if self.client.node_exists(self.client.AUTO, path):
+            result = self.client.delete(path)
+        result = self.client.set(path)
+        result = self.client.commit("")
+
+    def create_group(self, name, members):
+        self.SetupSession()
+        path = [ "system", "login", "group", name ]
+        if not self.client.node_exists(self.client.AUTO, path):
+            result = self.client.set(path)
+            result = self.client.commit("")
+
+        # members -- TODO
+
+    def lock_passwd(self, user):
+        """
+        Lock the password of a user, i.e., disable password logins
+        Called in 'config' phase.
+        """
+        self.SetupSession()
+        for passwdType in [ "encrypted-password", "plaintext-password" ]:
+            path = [ "system", "login", "user", user, "authentication",
+                     passwdType ]
+            if self.client.node_exists(self.client.AUTO, path):
+                result = self.client.delete(path)
+                result = self.client.commit("")
+
+    #
+    # The following functions are called during 'config phase' which is executed
+    # after the configd system loaded the initial configuration file.
+    #
+
+    def _dist_uses_systemd(self):
+	return True
+
+    def apply_locale(self, locale, out_fn=None):
+        if not out_fn:
+            if self._dist_uses_systemd():
+                out_fn = self.systemd_locale_conf_fn
+            else:
+                out_fn = self.locale_conf_fn
+        util.subp(['locale-gen', locale], capture=False)
+        util.subp(['update-locale', locale], capture=False)
+        # "" provides trailing newline during join
+        lines = [
+            util.make_header(),
+            'LANG="%s"' % (locale),
+            "",
+        ]
+        util.write_file(out_fn, "\n".join(lines))
+
+    def set_timezone(self, tz):
+        tz_file = self._find_tz_file(tz)
+        # FIXME: Write TZ to config.boot "set system time-zone"
+        if self._dist_uses_systemd():
+            # Currently, timedatectl complains if invoked during startup
+            # so for compatibility, create the link manually.
+            util.del_file(self.tz_local_fn)
+            util.sym_link(tz_file, self.tz_local_fn)
+        else:
+            distros.set_etc_timezone(tz=tz, tz_file=tz_file)
+
+    def install_packages(self, pkglist):
+        return
+
+    def package_command(self, command, args=None, pkgs=None):
+        return
+
+    def update_package_sources(self):
+        return
