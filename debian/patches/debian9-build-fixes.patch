--- a/cloudinit/sources/DataSourceGCE.py
+++ b/cloudinit/sources/DataSourceGCE.py
@@ -21,7 +21,8 @@
 
 
 class GoogleMetadataFetcher(object):
-    headers = {'Metadata-Flavor': 'Google'}
+    headers = {'Metadata-Flavor': 'Google',
+        'X-Google-Metadata-Request': 'True'}
 
     def __init__(self, metadata_address):
         self.metadata_address = metadata_address
--- a/tests/unittests/test_templating.py
+++ b/tests/unittests/test_templating.py
@@ -69,8 +69,8 @@
         self.assertEqual("1,2", c)
 
     def test_render_jinja(self):
-	if not templater.JINJA_AVAILABLE:
-		return True
+        if not templater.JINJA_AVAILABLE:
+            return True
         blob = '''## template:jinja
 {{a}},{{b}}'''
         c = templater.render_string(blob, {"a": 1, "b": 2})
--- a/tests/unittests/test_datasource/test_cloudstack.py
+++ b/tests/unittests/test_datasource/test_cloudstack.py
@@ -4,8 +4,11 @@
 from cloudinit import util
 from cloudinit.sources.DataSourceCloudStack import (
     DataSourceCloudStack, get_latest_lease)
+from cloudinit.sources.DataSourceCloudStack \
+    import get_vr_address as get_vr_address
 
 from cloudinit.tests.helpers import CiTestCase, ExitStack, mock
+import cloudinit.tests.helpers as test_helpers
 
 import os
 import time
@@ -42,6 +45,7 @@
                        subp))
         return subp
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_empty_password_doesnt_create_config(self):
         from cloudinit.tests.helpers import SkipTest
         raise SkipTest("Test fails without network")
@@ -52,6 +56,7 @@
         ds.get_data()
         self.assertEqual({}, ds.get_config_obj())
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_saved_password_doesnt_create_config(self):
         from cloudinit.tests.helpers import SkipTest
         raise SkipTest("Test fails without network")
@@ -62,6 +67,7 @@
         ds.get_data()
         self.assertEqual({}, ds.get_config_obj())
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_password_sets_password(self):
         from cloudinit.tests.helpers import SkipTest
         raise SkipTest("Test fails without network")
@@ -73,6 +79,7 @@
         ds.get_data()
         self.assertEqual(password, ds.get_config_obj()['password'])
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_bad_request_doesnt_stop_ds_from_working(self):
         from cloudinit.tests.helpers import SkipTest
         raise SkipTest("Test fails without network")
@@ -82,6 +89,7 @@
             {}, None, helpers.Paths({'run_dir': self.tmp}))
         self.assertTrue(ds.get_data())
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def assertRequestTypesSent(self, subp, expected_request_types):
         request_types = []
         for call in subp.call_args_list:
@@ -91,6 +99,7 @@
                     request_types.append(arg.split()[1])
         self.assertEqual(expected_request_types, request_types)
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_valid_response_means_password_marked_as_saved(self):
         from cloudinit.tests.helpers import SkipTest
         raise SkipTest("Test fails without network")
@@ -113,12 +122,15 @@
         ds.get_data()
         self.assertRequestTypesSent(subp, ['send_my_password'])
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_password_not_saved_if_empty(self):
         self._check_password_not_saved_for('')
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_password_not_saved_if_already_saved(self):
         self._check_password_not_saved_for('saved_password')
 
+    @test_helpers.skipIf(not get_vr_address(), "no default router")
     def test_password_not_saved_if_bad_request(self):
         self._check_password_not_saved_for('bad_request')
 
